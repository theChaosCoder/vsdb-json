{
    "namespace": "muvsfunc",
    "shortalias": "muf",
    "identifier": "muvsfunc",
    "name": "muvsfunc",
    "type": "PyScript",
    "gpusupport": "",
    "vs_included": 0,
    "url_github": "https://github.com/WolframRhodium/muvsfunc",
    "url_doom9": "",
    "url_avswiki": "",
    "url_website": "https://github.com/WolframRhodium/muvsfunc",
    "vsrepo": 1,
    "description": "Muonium's VapourSynth functions",
    "deprecated": "",
    "created_at": "2018-09-25 13:07:28",
    "updated_at": "2018-09-25 13:07:28",
    "deleted_at": null,
    "category": "Collection",
    "functions": [
        {
            "name": "LDMerge",
            "description": "Merges two filtered clips based on the gradient direction map from a source clip.",
            "bitdepth": "8-16 int",
            "colorspace": "GRAY, YUV, RGB, YCOCG",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:28",
            "updated_at": "2018-09-27 03:19:56",
            "deleted_at": null,
            "category": "unknown"
        },
        {
            "name": "Compare",
            "description": "Visualizes the difference between the source clip and filtered clip",
            "bitdepth": "8-16 int / 32 float",
            "colorspace": "GRAY, YUV, YCOCG",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:28",
            "updated_at": "2018-09-25 13:07:28",
            "deleted_at": null,
            "category": "unknown"
        },
        {
            "name": "Compare2",
            "description": "Compares the formats of two clips.",
            "bitdepth": "any",
            "colorspace": "any",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:28",
            "updated_at": "2018-09-25 13:07:28",
            "deleted_at": null,
            "category": "unknown"
        },
        {
            "name": "ExInpand",
            "description": "A filter to simplify the calls of std.Maximum()/std.Minimum() and their concatenation.",
            "bitdepth": "8-16 int / 32 float",
            "colorspace": "GRAY, YUV, RGB, YCOCG",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:28",
            "updated_at": "2018-09-27 03:22:27",
            "deleted_at": null,
            "category": "unknown"
        },
        {
            "name": "InDeflate",
            "description": "A filter to simplify the calls of std.Inflate()/std.Deflate() and their concatenation.",
            "bitdepth": "8-16 int / 32 float",
            "colorspace": "GRAY, YUV, RGB, YCOCG",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:28",
            "updated_at": "2018-09-27 03:22:54",
            "deleted_at": null,
            "category": "unknown"
        },
        {
            "name": "MultiRemoveGrain",
            "description": "A filter to simplify the calls of rgvs.RemoveGrain().",
            "bitdepth": "8-16 int",
            "colorspace": "GRAY, YUV, RGB, YCOCG",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:28",
            "updated_at": "2018-09-25 13:07:28",
            "deleted_at": null,
            "category": "Denoising"
        },
        {
            "name": "GradFun3",
            "description": "Internal calculation precision is always 16 bits. In this function I try to keep the original look of GradFun3 in Avisynth.  It should be better to use Frechdachs's GradFun3 in his fvsfunc.py",
            "bitdepth": "8-16 int",
            "colorspace": "YUV, GRAY, YCOCG",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:28",
            "updated_at": "2018-09-25 13:07:28",
            "deleted_at": null,
            "category": "Debanding"
        },
        {
            "name": "AnimeMask",
            "description": "Generates edge/ringing mask for anime based on gradient operator. For Anime's ringing mask, it's recommended to set 'shift' between 0.5 to 1.0.",
            "bitdepth": "8-16 int / 32 float",
            "colorspace": "GRAY, YUV, YCOCG",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:28",
            "updated_at": "2018-09-27 03:24:13",
            "deleted_at": null,
            "category": "Masking and Edge Detecting"
        },
        {
            "name": "AnimeMask2",
            "description": "Yet another filter to generate edge/ringing mask for anime. More specifically, it's an approximate Difference of Gaussians filter based on resampling kernel.",
            "bitdepth": "8-16 int / 32 float",
            "colorspace": "GRAY, YUV, YCOCG",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:28",
            "updated_at": "2018-09-27 03:24:36",
            "deleted_at": null,
            "category": "Masking and Edge Detecting"
        },
        {
            "name": "PolygonExInpand",
            "description": "Processes mask based on resampling.",
            "bitdepth": "8-16 int / 32 float",
            "colorspace": "GRAY, YUV, YCOCG",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:28",
            "updated_at": "2018-09-27 03:27:10",
            "deleted_at": null,
            "category": "unknown"
        },
        {
            "name": "Luma",
            "description": "std.Lut() implementation of Luma() in Histogram() filter.",
            "bitdepth": "8-16 int",
            "colorspace": "GRAY, YUV, YCOCG",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:28",
            "updated_at": "2018-09-25 13:07:28",
            "deleted_at": null,
            "category": "unknown"
        },
        {
            "name": "ediaa",
            "description": "",
            "bitdepth": "8-16 int",
            "colorspace": "GRAY, YUV, RGB, YCOCG",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:28",
            "updated_at": "2018-09-25 13:07:28",
            "deleted_at": null,
            "category": "Anti-aliasing"
        },
        {
            "name": "nnedi3aa",
            "description": "",
            "bitdepth": "8-16 int / 32 float",
            "colorspace": "GRAY, YUV, RGB, YCOCG",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:28",
            "updated_at": "2018-09-25 13:07:28",
            "deleted_at": null,
            "category": "Anti-aliasing"
        },
        {
            "name": "maa",
            "description": "Anti-aliasing with edge masking by martino, mask using 'sobel' taken from Kintaro's useless filterscripts and modded by thetoof for spline36",
            "bitdepth": "8-16 int / 32 float",
            "colorspace": "GRAY, YUV, RGB, YCOCG",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:28",
            "updated_at": "2018-09-25 13:07:28",
            "deleted_at": null,
            "category": "Anti-aliasing"
        },
        {
            "name": "SharpAAMcmod",
            "description": "High quality MoComped AntiAliasing script. Also a line darkener since it uses edge masking to apply tweakable warp-sharpening, 'normal' sharpening and line darkening with optional temporal stabilization of these edges. Part of AnimeIVTC.",
            "bitdepth": "8-16 int",
            "colorspace": "GRAY, YUV, RGB, YCOCG",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:28",
            "updated_at": "2018-09-25 13:07:28",
            "deleted_at": null,
            "category": "Anti-aliasing"
        },
        {
            "name": "TEdge",
            "description": "Detects edge using TEdgeMask(type=2)",
            "bitdepth": "8-16 int / 32 float",
            "colorspace": "GRAY, YUV, YCOCG",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:28",
            "updated_at": "2018-09-25 13:07:28",
            "deleted_at": null,
            "category": "Masking and Edge Detecting"
        },
        {
            "name": "Sort",
            "description": "Simple filter to get nth largeest value in 3x3 neighbourhood.",
            "bitdepth": "8-16 int",
            "colorspace": "GRAY, YUV, RGB, YCOCG",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:28",
            "updated_at": "2018-09-27 03:28:39",
            "deleted_at": null,
            "category": "unknown"
        },
        {
            "name": "Soothe_mod",
            "description": "Modified Soothe()",
            "bitdepth": "8-16 int",
            "colorspace": "GRAY, YUV, YCOCG",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:28",
            "updated_at": "2018-09-27 03:32:34",
            "deleted_at": null,
            "category": "Denoising"
        },
        {
            "name": "TemporalSoften",
            "description": "TemporalSoften filter without thresholding using Miscellaneous filter. There will be slight difference in result compare to havsfunc.TemporalSoften().",
            "bitdepth": "8-16 int / 32 float",
            "colorspace": "GRAY, YUV, RGB, YCOCG",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:28",
            "updated_at": "2018-09-27 03:33:50",
            "deleted_at": null,
            "category": "Denoising"
        },
        {
            "name": "FixTelecinedFades",
            "description": "The main algorithm was proposed by feisty2 (http://forum.doom9.org/showthread.php?t=174151). The filter gives a mathematically perfect solution to such (fades were done AFTER telecine which made a picture perfect IVTC pretty much impossible) problem. Goodbye vinverse.",
            "bitdepth": "8-16 int / 32 float",
            "colorspace": "GRAY, YUV, YCOCG",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:29",
            "updated_at": "2018-09-27 03:36:43",
            "deleted_at": null,
            "category": "Inverse Telecine"
        },
        {
            "name": "TCannyHelper",
            "description": "A helper function for tcanny.TCanny(mode=0). Strong edge detected by 't_h' will be highlighted in white, and weak edge detected by 't_l' will be highlighted in gray.",
            "bitdepth": "8-16 int / 32 float",
            "colorspace": "GRAY, YUV, YCOCG",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:29",
            "updated_at": "2018-09-27 03:38:24",
            "deleted_at": null,
            "category": "Masking and Edge Detecting"
        },
        {
            "name": "MergeChroma",
            "description": "A function that merges the chroma from one videoclip into another. Ported from Avisynth's equivalent. There is an optional weighting, so a percentage between the two clips can be specified.",
            "bitdepth": "8-16 int / 32 float",
            "colorspace": "YUV, YCOCG",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:29",
            "updated_at": "2018-09-27 03:39:25",
            "deleted_at": null,
            "category": "unknown"
        },
        {
            "name": "firniture",
            "description": "5 new interpolation kernels (via fmtconv). Proposed by *.mp4 guy (https://forum.doom9.org/showthread.php?t=166080)",
            "bitdepth": "8-16 int / 32 float",
            "colorspace": "GRAY, YUV, RGB, YCOCG",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:29",
            "updated_at": "2018-09-27 03:41:02",
            "deleted_at": null,
            "category": "Resizing and Format Conversion"
        },
        {
            "name": "BoxFilter",
            "description": "Performs a box filtering on the input clip. Box filtering consists in averaging all the pixels in a square area whose center is the output pixel. You can approximate a large gaussian filtering by cascading a few box filters.",
            "bitdepth": "8-16 int / 32 float",
            "colorspace": "GRAY, YUV, RGB, YCOCG",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:29",
            "updated_at": "2018-09-27 03:42:57",
            "deleted_at": null,
            "category": "Denoising"
        },
        {
            "name": "SmoothGrad",
            "description": "SmoothGrad smooths the low gradients or flat areas of a 16-bit clip. It proceeds by applying a huge blur filter and comparing the result with the input data for each pixel. If the difference is below the specified threshold, the filtered version is taken into account, otherwise the input pixel remains unchanged.",
            "bitdepth": "8-16 int / 32 float",
            "colorspace": "GRAY, YUV, RGB, YCOCG",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:29",
            "updated_at": "2018-09-27 03:46:07",
            "deleted_at": null,
            "category": "Color/Levels"
        },
        {
            "name": "DeFilter",
            "description": "Zero-order reverse filter (arXiv:1704.04037)",
            "bitdepth": "Depends on function used",
            "colorspace": "Depends on function used",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:29",
            "updated_at": "2018-09-27 03:47:30",
            "deleted_at": null,
            "category": "unknown"
        },
        {
            "name": "ColorBarsHD",
            "description": "Avisynth's ColorBarsHD(). It produces a video clip containing SMPTE color bars (Rec. ITU-R BT.709 / arib std b28 v1.0) scaled to any image size. By default, a 1288\u00d7720, YV24, TV range, 29.97 fps, 1 frame clip is produced.",
            "bitdepth": "any",
            "colorspace": "any",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:29",
            "updated_at": "2018-09-27 03:49:05",
            "deleted_at": null,
            "category": "Source/Output"
        },
        {
            "name": "SeeSaw",
            "description": "",
            "bitdepth": "8-16 int",
            "colorspace": "GRAY, YUV, YCOCG",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:29",
            "updated_at": "2018-09-27 03:49:42",
            "deleted_at": null,
            "category": "Sharpening"
        },
        {
            "name": "SeeSaw_sharpen2",
            "description": "Modified sharpening function from SeeSaw(). Only the first plane (luma) will be processed.",
            "bitdepth": "8-16 int",
            "colorspace": "GRAY, YUV, YCOCG",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:29",
            "updated_at": "2018-09-27 03:50:04",
            "deleted_at": null,
            "category": "Sharpening"
        },
        {
            "name": "SeeSaw_SootheSS",
            "description": "Soothe() function to stabilze sharpening from SeeSaw(). Only the first plane (luma) will be processed.",
            "bitdepth": "8-16 int",
            "colorspace": "GRAY, YUV, YCOCG",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:29",
            "updated_at": "2018-09-27 03:50:38",
            "deleted_at": null,
            "category": "Denoising"
        },
        {
            "name": "abcxyz",
            "description": "Avisynth's abcxyz(). Reduces halo artifacts that can occur when sharpening.",
            "bitdepth": "8-16 int",
            "colorspace": "GRAY, YUV",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:29",
            "updated_at": "2018-09-25 13:07:29",
            "deleted_at": null,
            "category": "Dehaloing"
        },
        {
            "name": "Sharpen",
            "description": "Avisynth's internel filter Sharpen(). Simple 3x3-kernel sharpening filter.",
            "bitdepth": "8-16 int / 32 float",
            "colorspace": "GRAY, YUV, RGB, YCOCG",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:29",
            "updated_at": "2018-09-27 03:51:53",
            "deleted_at": null,
            "category": "Sharpening"
        },
        {
            "name": "Blur",
            "description": "Avisynth's internel filter Blur(). Simple 3x3-kernel blurring filter. In fact Blur(n) is just an alias for Sharpen(-n).",
            "bitdepth": "8-16 int / 32 float",
            "colorspace": "GRAY, YUV, RGB, YCOCG",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:29",
            "updated_at": "2018-09-27 03:52:15",
            "deleted_at": null,
            "category": "Denoising"
        },
        {
            "name": "BlindDeHalo3",
            "description": "This script removes the light & dark halos from too strong 'Edge Enhancement'.",
            "bitdepth": "8-16 int",
            "colorspace": "GRAY, YUV",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:29",
            "updated_at": "2018-09-25 13:07:29",
            "deleted_at": null,
            "category": "Dehaloing"
        },
        {
            "name": "dfttestMC",
            "description": "Avisynth's dfttestMC. Motion-compensated dfttest",
            "bitdepth": "8-16 int",
            "colorspace": "GRAY, YUV420, YUV422, YUV440, YUV444",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:29",
            "updated_at": "2018-09-25 13:07:29",
            "deleted_at": null,
            "category": "Denoising"
        },
        {
            "name": "TurnLeft",
            "description": "Avisynth's internel function TurnLeft()",
            "bitdepth": "any",
            "colorspace": "GRAY, YUV, RGB, YCOCG",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:29",
            "updated_at": "2018-09-27 03:53:04",
            "deleted_at": null,
            "category": "unknown"
        },
        {
            "name": "TurnRight",
            "description": "Avisynth's internel function TurnRight()",
            "bitdepth": "any",
            "colorspace": "GRAY, YUV, RGB, YCOCG",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:29",
            "updated_at": "2018-09-27 03:53:19",
            "deleted_at": null,
            "category": "unknown"
        },
        {
            "name": "BalanceBorders",
            "description": "Avisynth's BalanceBorders() Version: v0.2,  Author: PL (https://www.dropbox.com/s/v8fm6om7hm1dz0b/BalanceBorders.avs)",
            "bitdepth": "unknown",
            "colorspace": "unknown",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:29",
            "updated_at": "2018-09-25 13:07:29",
            "deleted_at": null,
            "category": "Borders and Cropping"
        },
        {
            "name": "DisplayHistogram",
            "description": "A simple function to display the histogram of an image.",
            "bitdepth": "unknown",
            "colorspace": "unknown",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:29",
            "updated_at": "2018-09-25 13:07:29",
            "deleted_at": null,
            "category": "Metrics and Analysis"
        },
        {
            "name": "GuidedFilter",
            "description": "fast edge-preserving smoothing algorithm. The guided filter computes the filtering output by considering the content of a guidance image. It can be used as an edge-preserving smoothing operator like the popular bilateral filter, but it has better behaviors near edges.",
            "bitdepth": "8-16 int / 32 float",
            "colorspace": "GRAY, YUV, RGB, YCOCG",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:29",
            "updated_at": "2018-09-27 03:55:36",
            "deleted_at": null,
            "category": "Denoising"
        },
        {
            "name": "GuidedFilterColor",
            "description": "fast edge-preserving smoothing algorithm using a color image as the guidance. A color guidance image can better preserve the edges that are not distinguishable in gray-scale.",
            "bitdepth": "8-16 int / 32 float",
            "colorspace": "Input: GRAY, Guidance: YUV444/RGB",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:29",
            "updated_at": "2018-09-27 03:57:22",
            "deleted_at": null,
            "category": "Denoising"
        },
        {
            "name": "GMSD",
            "description": "Gradient Magnitude Similarity Deviation Calculator. GMSD is a new effective and efficient image quality assessment (IQA) model, which utilizes the pixel-wise gradient magnitude similarity (GMS) between the reference and distorted images combined with standard deviation of the GMS map to predict perceptual image quality.",
            "bitdepth": "8-16 int / 32 float",
            "colorspace": "GRAY, YUV, RGB, YCOCG",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:29",
            "updated_at": "2018-09-27 03:58:18",
            "deleted_at": null,
            "category": "Metrics and Analysis"
        },
        {
            "name": "SSIM",
            "description": "The Structural SIMilarity (SSIM) index is a method for measuring the similarity between two images. It is based on the hypothesis that the HVS is highly adapted for extracting structural information, which compares local patterns of pixel intensities that have been normalized for luminance and contrast.",
            "bitdepth": "8-16 int / 32 float",
            "colorspace": "GRAY, YUV, RGB, YCOCG",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:29",
            "updated_at": "2018-09-27 03:58:39",
            "deleted_at": null,
            "category": "Metrics and Analysis"
        },
        {
            "name": "IQA_downsample",
            "description": "Downsampler for image quality assessment model.",
            "bitdepth": "8-16 int / 32 float",
            "colorspace": "GRAY, YUV, RGB, YCOCG",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:29",
            "updated_at": "2018-09-27 03:59:31",
            "deleted_at": null,
            "category": "Resizing and Format Conversion"
        },
        {
            "name": "SSIM_downsample",
            "description": "SSIM downsampler is an image downscaling technique that aims to optimize for the perceptual quality of the downscaled results. Image downscaling is considered as an optimization problem where the difference between the input and output images is measured using famous Structural SIMilarity (SSIM)",
            "bitdepth": "8-16 int / 32 float",
            "colorspace": "GRAY, YUV, RGB, YCOCG",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:29",
            "updated_at": "2018-09-27 04:00:06",
            "deleted_at": null,
            "category": "Resizing and Format Conversion"
        },
        {
            "name": "LocalStatisticsMatching",
            "description": "Match the local statistics (mean, variance) of 'src' with 'ref'.",
            "bitdepth": "unknown",
            "colorspace": "unknown",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:30",
            "updated_at": "2018-09-25 13:07:30",
            "deleted_at": null,
            "category": "unknown"
        },
        {
            "name": "LocalStatistics",
            "description": "The local mean and variance will be returned.",
            "bitdepth": "unknown",
            "colorspace": "unknown",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:30",
            "updated_at": "2018-09-25 13:07:30",
            "deleted_at": null,
            "category": "unknown"
        },
        {
            "name": "TextSub16",
            "description": "Generate mask in YUV and use it to mask high-precision subtitles overlayed in RGB.",
            "bitdepth": "8-16 int",
            "colorspace": "unknown",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:30",
            "updated_at": "2018-09-25 13:07:30",
            "deleted_at": null,
            "category": "Subtitles"
        },
        {
            "name": "TMinBlur",
            "description": "Thresholded MinBlur. Use another MinBlur with larger radius to guide the smoothing effect of current MinBlur.",
            "bitdepth": "8-16 int",
            "colorspace": "GRAY, YUV, RGB, YCOCG",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:30",
            "updated_at": "2018-09-25 13:07:30",
            "deleted_at": null,
            "category": "unknown"
        },
        {
            "name": "mdering",
            "description": "A simple light and bright DCT ringing remover",
            "bitdepth": "8-16 int",
            "colorspace": "GRAY, YUV, RGB, YCOCG",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:30",
            "updated_at": "2018-09-25 13:07:30",
            "deleted_at": null,
            "category": "Deringing/Edge cleaning"
        },
        {
            "name": "BMAFilter",
            "description": "Edge-aware BMA filter is a family of edge-aware filters proposed based on optimal parameter estimation and Bayesian model averaging (BMA).",
            "bitdepth": "8-16 int / 32 float",
            "colorspace": "GRAY, YUV, RGB, YCOCG",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:30",
            "updated_at": "2018-09-25 13:07:30",
            "deleted_at": null,
            "category": "unknown"
        },
        {
            "name": "LLSURE",
            "description": "Local Linear SURE-Based Edge-Preserving Image Filtering",
            "bitdepth": "8-16 int / 32 float",
            "colorspace": "GRAY, YUV, RGB, YCOCG",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:30",
            "updated_at": "2018-09-25 13:07:30",
            "deleted_at": null,
            "category": "unknown"
        },
        {
            "name": "YAHRmod",
            "description": "Modded YAHR with better texture preserving property",
            "bitdepth": "8-16 int",
            "colorspace": "GRAY, YUV, RGB, YCOCG",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:30",
            "updated_at": "2018-09-25 13:07:30",
            "deleted_at": null,
            "category": "Dehaloing"
        },
        {
            "name": "RandomInterleave",
            "description": "Returns a clip with the frames from all clips randomly interleaved. Useful for a blinded-experiment.",
            "bitdepth": "any",
            "colorspace": "any",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:30",
            "updated_at": "2018-09-25 13:07:30",
            "deleted_at": null,
            "category": "unknown"
        },
        {
            "name": "super_resolution",
            "description": "Use MXNet to accelerated Image-Processing in VapourSynth using a C++ interface",
            "bitdepth": "",
            "colorspace": "unknown",
            "gpusupport": "MXNet, CUDA",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:30",
            "updated_at": "2018-09-25 13:07:30",
            "deleted_at": null,
            "category": "unknown"
        },
        {
            "name": "fade",
            "description": "Fade-in/out effect implementation",
            "bitdepth": "8-16 int / 16-32 float",
            "colorspace": "GRAY, YUV, RGB",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2019-02-03 19:02:05",
            "updated_at": "2019-02-03 19:02:31",
            "deleted_at": null,
            "category": "Effects and Transitions"
        },
        {
            "name": "MDSI",
            "description": "MDSI (Mean Deviation Similarity Index) is a full reference IQA model that utilize gradient similarity (GS), chromaticity similarity (CS), and deviation pooling (DP). The lowerer the MDSI score, the higher the image perceptual quality.",
            "bitdepth": "",
            "colorspace": "RGB",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2019-02-08 14:33:28",
            "updated_at": "2019-02-08 14:33:28",
            "deleted_at": null,
            "category": "Metrics and Analysis"
        },
        {
            "name": "MaskedLimitFilter",
            "description": "",
            "bitdepth": "8-16 int / 16-32 float",
            "colorspace": "GRAY, YUV, RGB, YCOCG",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2019-03-25 22:16:56",
            "updated_at": "2019-03-25 22:16:56",
            "deleted_at": null,
            "category": "Other"
        },
        {
            "name": "PoissonMaskedMerge",
            "description": "Poisson editing, a.k.a. gradient-based image processing, directly edits the gradient of images to perform useful operations. Seamless cloning allows one to copy an object from an image, and paste it to another image that looks seamless and natural.",
            "bitdepth": "",
            "colorspace": "",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2019-04-01 08:38:45",
            "updated_at": "2019-04-01 08:38:45",
            "deleted_at": null,
            "category": "unknown"
        },
        {
            "name": "multi_scale",
            "description": "A decorator that \"multi-scale\" a given function. Note that the resulting function may be significantly different from its single-scale counterpart.",
            "bitdepth": "",
            "colorspace": "",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2019-04-14 18:11:16",
            "updated_at": "2019-04-14 18:11:16",
            "deleted_at": null,
            "category": "Other"
        },
        {
            "name": "avg_decimate",
            "description": "Averaging-based decimation filter, which averages duplicates frames before drops one in every cycle frames.",
            "bitdepth": "8-16 int",
            "colorspace": "GRAY, YUV, RGB, YCOCG",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2019-04-27 17:20:25",
            "updated_at": "2019-04-27 17:20:25",
            "deleted_at": null,
            "category": "Inverse Telecine"
        },
        {
            "name": "YAHRmask",
            "description": "",
            "bitdepth": "8-16 int",
            "colorspace": "GRAY, YUV, YCOCG",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2019-04-29 07:26:26",
            "updated_at": "2019-04-29 07:26:26",
            "deleted_at": null,
            "category": "Masking and Edge Detecting"
        },
        {
            "name": "Cdeblend",
            "description": "A simple blend replacing function like unblend or removeblend. Ported from Cdeblend v1.1b (http://avisynth.nl/images/Cdeblend.avs)",
            "bitdepth": "",
            "colorspace": "GRAY, YUV, YCOCG",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2019-05-19 15:14:44",
            "updated_at": "2019-05-19 15:14:44",
            "deleted_at": null,
            "category": "unknown"
        },
        {
            "name": "S_BoxFilter",
            "description": "Side window box filter is a local edge-preserving filter that is derived from conventional box filter and side window filtering technique.",
            "bitdepth": "",
            "colorspace": "",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2019-06-03 01:07:37",
            "updated_at": "2019-06-03 01:07:37",
            "deleted_at": null,
            "category": "unknown"
        },
        {
            "name": "VFRSplice",
            "description": "",
            "bitdepth": "any",
            "colorspace": "any",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2019-06-06 22:21:19",
            "updated_at": "2019-06-06 22:21:19",
            "deleted_at": null,
            "category": "unknown"
        },
        {
            "name": "resize",
            "description": "Experimental wrapper function for vszimg resizer in a fmtconv-like API",
            "bitdepth": "unknown",
            "colorspace": "unknown",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2019-08-11 16:04:12",
            "updated_at": "2019-08-11 16:04:12",
            "deleted_at": null,
            "category": "Resizing and Format Conversion"
        },
        {
            "name": "MSR",
            "description": "Multiscale retinex is a local contrast enhancement algorithm, which could be useful as a pre-processing step for texture detection.",
            "bitdepth": "16-32 float",
            "colorspace": "",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2020-01-02 09:36:49",
            "updated_at": "2020-01-02 09:36:49",
            "deleted_at": null,
            "category": "unknown"
        }
    ]
}