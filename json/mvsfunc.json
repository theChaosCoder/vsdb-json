{
    "namespace": "mvsfunc",
    "shortalias": "mvf",
    "identifier": "mvsfunc",
    "name": "mvsfunc",
    "type": "PyScript",
    "gpusupport": "",
    "vs_included": 0,
    "url_github": "https://github.com/HomeOfVapourSynthEvolution/mvsfunc",
    "url_doom9": "https://forum.doom9.org/showthread.php?t=172564",
    "url_avswiki": "",
    "url_website": "https://github.com/HomeOfVapourSynthEvolution/mvsfunc",
    "vsrepo": 1,
    "description": "mawen1250's VapourSynth functions",
    "deprecated": "",
    "created_at": "2018-09-25 13:07:26",
    "updated_at": "2018-09-25 13:07:26",
    "deleted_at": null,
    "category": "Collection",
    "functions": [
        {
            "name": "Depth",
            "description": "it depth conversion with dithering (if needed).  It's a wrapper for fmtc.bitdepth and zDepth(core.resize/zimg).",
            "bitdepth": "8-16 int / 32 float",
            "colorspace": "unknown",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:26",
            "updated_at": "2018-09-25 13:07:26",
            "deleted_at": null,
            "category": "unknown"
        },
        {
            "name": "ToRGB",
            "description": "Convert any color space to full range RGB.",
            "bitdepth": "8-16 int / 32 float",
            "colorspace": "unknown",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:26",
            "updated_at": "2018-09-25 13:07:26",
            "deleted_at": null,
            "category": "unknown"
        },
        {
            "name": "ToYUV",
            "description": "Convert any color space to YUV/YCoCg with/without sub-sampling.",
            "bitdepth": "8-16 int / 32 float",
            "colorspace": "unknown",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:26",
            "updated_at": "2018-09-25 13:07:26",
            "deleted_at": null,
            "category": "unknown"
        },
        {
            "name": "BM3D",
            "description": "A wrap function for BM3D/V-BM3D denoising filter.",
            "bitdepth": "8-16 int / 16-32 float",
            "colorspace": "unknown",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:27",
            "updated_at": "2018-09-25 13:07:27",
            "deleted_at": null,
            "category": "Denoising"
        },
        {
            "name": "VFRSplice",
            "description": "Splice multiple clips with different frame rate, and output timecode file. Input clip is CFR, output clip is VFR.",
            "bitdepth": "unknown",
            "colorspace": "unknown",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:27",
            "updated_at": "2018-09-25 13:07:27",
            "deleted_at": null,
            "category": "Frame Rate Conversion"
        },
        {
            "name": "PlaneStatistics",
            "description": "Calculate statistics of specific plane and store them as frame properties. All the values are normalized (float that the peak-to-peak value is 1)",
            "bitdepth": "any",
            "colorspace": "unknown",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:27",
            "updated_at": "2018-09-25 13:07:27",
            "deleted_at": null,
            "category": "unknown"
        },
        {
            "name": "PlaneCompare",
            "description": "Compare specific plane of 2 clips and store the statistical results as frame properties. All the values are normalized (float of which the peak-to-peak value is 1) except PSNR",
            "bitdepth": "any",
            "colorspace": "unknown",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:27",
            "updated_at": "2018-09-25 13:07:27",
            "deleted_at": null,
            "category": "unknown"
        },
        {
            "name": "ShowAverage",
            "description": "Display unnormalized average of each plane",
            "bitdepth": "any",
            "colorspace": "unknown",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:27",
            "updated_at": "2018-09-25 13:07:27",
            "deleted_at": null,
            "category": "unknown"
        },
        {
            "name": "FilterIf",
            "description": "Take the frames from clip 'flt' that is marked to be filtered and the ones from clip 'src' that is not. An arbitrary frame property named 'prop_name' from clip 'props' is evaluated to determine whether it should be filtered.",
            "bitdepth": "any",
            "colorspace": "unknown",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:27",
            "updated_at": "2018-09-25 13:07:27",
            "deleted_at": null,
            "category": "unknown"
        },
        {
            "name": "FilterCombed",
            "description": "Take the frames from clip 'flt' that is marked as combed and the ones from clip 'src' that is not.",
            "bitdepth": "any",
            "colorspace": "unknown",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:27",
            "updated_at": "2018-09-25 13:07:27",
            "deleted_at": null,
            "category": "unknown"
        },
        {
            "name": "Min",
            "description": "Take 2 clips and return pixel-wise minimum of them. With a special mode=2 for difference clip.",
            "bitdepth": "any",
            "colorspace": "unknown",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:27",
            "updated_at": "2018-09-25 13:07:27",
            "deleted_at": null,
            "category": "unknown"
        },
        {
            "name": "Max",
            "description": "Take 2 clips and return pixel-wise maximum of them. With a special mode=2 for difference clip.",
            "bitdepth": "unknown",
            "colorspace": "unknown",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:27",
            "updated_at": "2018-09-25 13:07:27",
            "deleted_at": null,
            "category": "unknown"
        },
        {
            "name": "Avg",
            "description": "Take 2 clips and return pixel-wise average of them.",
            "bitdepth": "any",
            "colorspace": "unknown",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:27",
            "updated_at": "2018-09-25 13:07:27",
            "deleted_at": null,
            "category": "unknown"
        },
        {
            "name": "MinFilter",
            "description": "Apply filtering with minimum difference of the 2 filtered clips.",
            "bitdepth": "any",
            "colorspace": "unknown",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:27",
            "updated_at": "2018-09-25 13:07:27",
            "deleted_at": null,
            "category": "unknown"
        },
        {
            "name": "MaxFilter",
            "description": "Apply filtering with maximum difference of the 2 filtered clips.",
            "bitdepth": "any",
            "colorspace": "unknown",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:27",
            "updated_at": "2018-09-25 13:07:27",
            "deleted_at": null,
            "category": "unknown"
        },
        {
            "name": "LimitFilter",
            "description": "Similar to the AviSynth function Dither_limit_dif16() and HQDeringmod_limit_dif16(). It acts as a post-processor, and is very useful to limit the difference of filtering while avoiding artifacts like  de-banding, de-ringing, de-noising, sharpening",
            "bitdepth": "8-16 int",
            "colorspace": "unknown",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:27",
            "updated_at": "2018-09-25 13:07:27",
            "deleted_at": null,
            "category": "unknown"
        },
        {
            "name": "PointPower",
            "description": "Up-scaling by a power of 2 with nearest-neighborhood interpolation (point resize)",
            "bitdepth": "unknown",
            "colorspace": "unknown",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:27",
            "updated_at": "2018-09-25 13:07:27",
            "deleted_at": null,
            "category": "Resizing and Format Conversion"
        },
        {
            "name": "CheckMatrix",
            "description": "*EXPERIMENTAL* Check whether the input YUV clip matches specific color matrix",
            "bitdepth": "unknown",
            "colorspace": "unknown",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:27",
            "updated_at": "2018-09-25 13:07:27",
            "deleted_at": null,
            "category": "unknown"
        },
        {
            "name": "postfix2infix",
            "description": "Convert postfix expression (used by std.Expr) to infix expression",
            "bitdepth": "unknown",
            "colorspace": "unknown",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:27",
            "updated_at": "2018-09-25 13:07:27",
            "deleted_at": null,
            "category": "unknown"
        },
        {
            "name": "SetColorSpace",
            "description": "Modify the color space related frame properties in the given clip. Detailed descriptions of these properties: http://www.vapoursynth.com/doc/apireference.html",
            "bitdepth": "unknown",
            "colorspace": "unknown",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:27",
            "updated_at": "2018-09-25 13:07:27",
            "deleted_at": null,
            "category": "unknown"
        },
        {
            "name": "AssumeFrame",
            "description": "Set all the frames in the given clip to be frame-based(progressive). It can be used to prevent the field order set in de-interlace filters from being overridden by the frame property '_FieldBased'.",
            "bitdepth": "any",
            "colorspace": "unknown",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:27",
            "updated_at": "2018-09-25 13:07:27",
            "deleted_at": null,
            "category": "unknown"
        },
        {
            "name": "AssumeTFF",
            "description": "Set all the frames in the given clip to be top-field-first(interlaced). This frame property will override the field order set in those de-interlace filters.",
            "bitdepth": "any",
            "colorspace": "unknown",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:27",
            "updated_at": "2018-09-25 13:07:27",
            "deleted_at": null,
            "category": "unknown"
        },
        {
            "name": "AssumeBFF",
            "description": "Set all the frames in the given clip to be bottom-field-first(interlaced). This frame property will override the field order set in those de-interlace filters.",
            "bitdepth": "any",
            "colorspace": "unknown",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:27",
            "updated_at": "2018-09-25 13:07:27",
            "deleted_at": null,
            "category": "unknown"
        },
        {
            "name": "AssumeField",
            "description": "Set all the frames in the given clip to be field-based(derived from interlaced frame).",
            "bitdepth": "any",
            "colorspace": "unknown",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:27",
            "updated_at": "2018-09-25 13:07:27",
            "deleted_at": null,
            "category": "unknown"
        },
        {
            "name": "AssumeCombed",
            "description": "Set all the frames in the given clip to be combed or not.",
            "bitdepth": "any",
            "colorspace": "unknown",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:27",
            "updated_at": "2018-09-25 13:07:27",
            "deleted_at": null,
            "category": "unknown"
        },
        {
            "name": "GetMatrix",
            "description": "Return str or int format parameter 'matrix'.",
            "bitdepth": "any",
            "colorspace": "unknown",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:28",
            "updated_at": "2018-09-25 13:07:28",
            "deleted_at": null,
            "category": "unknown"
        },
        {
            "name": "zDepth",
            "description": "Smart function to utilize zimg depth conversion for both 1.0 and 2.0 API of vszimg as well as core.resize. core.resize is preferred now.",
            "bitdepth": "unknown",
            "colorspace": "unknown",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:28",
            "updated_at": "2018-09-25 13:07:28",
            "deleted_at": null,
            "category": "unknown"
        },
        {
            "name": "PlaneAverage",
            "description": "Evaluate normalized average value of the specified plane and store it as a frame property. Mainly as a wrap function to support both std.PlaneAverage and std.PlaneStats with the same interface.",
            "bitdepth": "unknown",
            "colorspace": "unknown",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:28",
            "updated_at": "2018-09-25 13:07:28",
            "deleted_at": null,
            "category": "unknown"
        },
        {
            "name": "GetPlane",
            "description": "Extract specific plane and store it in a Gray clip.",
            "bitdepth": "unknown",
            "colorspace": "unknown",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:28",
            "updated_at": "2018-09-25 13:07:28",
            "deleted_at": null,
            "category": "unknown"
        },
        {
            "name": "GrayScale",
            "description": "Convert the given clip to gray-scale.",
            "bitdepth": "unknown",
            "colorspace": "unknown",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:28",
            "updated_at": "2018-09-25 13:07:28",
            "deleted_at": null,
            "category": "unknown"
        },
        {
            "name": "Preview",
            "description": "Convert the given clip or clips to the same RGB format. When multiple clips is given, they will be interleaved together, and resized to the same dimension using 'Catmull-Rom'.",
            "bitdepth": "unknown",
            "colorspace": "unknown",
            "gpusupport": "",
            "deprecated": "",
            "created_at": "2018-09-25 13:07:28",
            "updated_at": "2018-09-25 13:07:28",
            "deleted_at": null,
            "category": "unknown"
        }
    ]
}